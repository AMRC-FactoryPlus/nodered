[{"id":"88753461.2b34c8","type":"subflow","name":"Sparkplug Device","info":"# Overview\nThis subflow simplifies the process of creating a new device connection and managing new data and handling incoming commands.\n\n---\n# Environment Variables\n`metrics` - This is an array of JSON objects in [Sparkplug payload format](https://github.com/eclipse/sparkplug/blob/master/specification/Sparkplug.adoc) which specifies the default list of metrics that your device will provide/receive. For example:\n```\n [\n    {\n        name: \"metric1\",\n        value: 123456,\n        type: \"int32\",\n    }, \n    {\n        name: \"metric2\",\n        value: \"foobar\",\n        type: \"string\",\n    },\n    ...\n]\n ```\n> Note that this variable should contain all of the metrics your device will provide/receive. If the list must be updated, you must either manually update this variable or provide a new birth certificate using the `rebirth` message type below.\n\n`deviceID` - This is the identifier for your \ndevice. It must be unique to this Sparkplug Node.\n\n\n---\n# Input\nThe input to this node should be wired both to the output of the Sparkplug MQTT node, as well as to the output from your device.\n\nThree types of messages are expected from your device, with the `msg.topic` used to define the message type. These are:\n\n - `ddata`: This is used to provide new data from your device. The data metrics must be provided as a javascript object matching the [Sparkplug payload format](https://github.com/eclipse/sparkplug/blob/master/specification/Sparkplug.adoc). You only need to provide data for those tags that have actually changed value as any unchanged values will be ignored.\n- `ddeath`: This is used to signify that your device has gone offline. You do not need to provide a `msg.payload`.\n- `dbirth`: This is used to signify that your device has come back online. If you send an empty payload, a `DBIRTH` message is sent for you where the metrics are read from the `metric` environment variable. If you provide a payload matching the [Sparkplug payload format](https://github.com/eclipse/sparkplug/blob/master/specification/Sparkplug.adoc), this will overrwrite the `metric` environment variable, then send a `DBIRTH` with the updated metrics.\n\n---\n# Outputs\n 1. Output to the Sparkplug MQTT node. Messages to be published are sent from here.\n 2. Output to your device. Updated values are provided in the `msg.payload` as a JSON object e.g. `{var1: 123, var2: \"foo\"}`.","category":"","in":[{"x":80,"y":260,"wires":[{"id":"1ed71f5d.32c9d1"}]}],"out":[{"x":520,"y":260,"wires":[{"id":"a7cd63db.c5c48","port":0},{"id":"8ce66c5d.029b2","port":0},{"id":"da3c13fd.1e727","port":0},{"id":"79489c66.772da4","port":0}]},{"x":520,"y":340,"wires":[{"id":"79489c66.772da4","port":1}]}],"env":[{"name":"metrics","type":"json","value":"[{\"name\":\"my_int\",\"value\":123,\"type\":\"int32\"},{\"name\":\"my_float\",\"value\":123,\"type\":\"float\"},{\"name\":\"Device_Control/Rebirth\",\"value\":false,\"type\":\"boolean\"}]"},{"name":"deviceID","type":"str","value":"device1"}],"color":"#DDAA99"},{"id":"1ed71f5d.32c9d1","type":"switch","z":"88753461.2b34c8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"rebirth","vt":"str"},{"t":"eq","v":"ddeath","vt":"str"},{"t":"eq","v":"ddata","vt":"str"},{"t":"eq","v":"deviceID","vt":"env"}],"checkall":"true","repair":false,"outputs":4,"x":190,"y":260,"wires":[["a7cd63db.c5c48"],["da3c13fd.1e727"],["8ce66c5d.029b2"],["79489c66.772da4"]]},{"id":"a7cd63db.c5c48","type":"function","z":"88753461.2b34c8","name":"DBIRTH","func":"if (msg.payload !== {}) {\n    flow.set('metrics', msg.payload.metrics);\n}\nmsg.payload = {\n    timestamp: Date.now(),\n    metrics: flow.get('metrics')\n};\nmsg.topic = `${env.get('deviceID')}/DBIRTH`;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":340,"y":200,"wires":[[]]},{"id":"8ce66c5d.029b2","type":"function","z":"88753461.2b34c8","name":"DDATA","func":"let oldMetrics = flow.get('metrics');\nawait Promise.all(msg.payload.metrics.map(async (metric) => {\n    await Promise.all(oldMetrics.map(async (oldMetric) => {\n        if (metric.name === oldMetric.name && metric.value !== oldMetric.value){\n            oldMetric.value = metric.value;\n        }\n    }));\n}));\nflow.set('metrics', oldMetrics);\nmsg.topic = `${env.get('deviceID')}/DDATA`;\nreturn msg;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nflow.set('metrics', env.get('metrics'));","finalize":"","x":340,"y":280,"wires":[[]]},{"id":"da3c13fd.1e727","type":"function","z":"88753461.2b34c8","name":"DDEATH","func":"msg.payload = {\n    timestamp: Date.now(),\n};\nmsg.topic = `${env.get('deviceID')}/DDEATH`;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":340,"y":240,"wires":[[]]},{"id":"79489c66.772da4","type":"function","z":"88753461.2b34c8","name":"Handle DCMD","func":"// Check if message is for this device\nif (msg.topic === env.get('deviceID')){\n    \n    let tagMatched = false;\n    let msgs = [];\n    let metrics = flow.get('metrics');\n\n    // Loop through all incoming metrics\n    await Promise.all(msg.payload.metrics.map(async (newMetric) => {\n        // Loop through all existing metrics\n        await Promise.all(metrics.map((metric) => {\n            // Check if there is a match and the value needs updating\n            if (newMetric.name === metric.name && newMetric.value !== metric.value){\n                \n                // Update the metric timestamp\n                const now = Date.now();\n                metric.timestamp = now;\n                newMetric.timestamp = now;\n                // Update the metric value\n                metric.value = newMetric.value;\n                if (metric.value === null) {\n                    newMetric.isNull = true\n                    metric.isNull = true\n                } else {\n                    newMetric.isNull = false;\n                    metric.isNull = false;\n                }\n                \n                // If the device output message doesn't exist, prepare a prototype\n                if (!tagMatched){\n                    tagMatched = true;\n                    // Prepare output messages\n                    msgs = [\n                        {payload: {timestamp: now, metrics:[]}, topic:`${env.get('deviceID')}/DDATA`},\n                        {payload: {}, topic:\"\"}\n                    ];\n                }\n                // Push the metric change to the DDATA output message\n                msgs[0].payload.metrics.push(newMetric);\n                // Set the name and value of the device output tag\n                msgs[1].payload[metric.name] = newMetric.value;\n            }\n        }));\n    }));\n    // If metric changes were applied, output the changes back to sparkplug\n    // and to the device itself.\n    if (tagMatched){\n        flow.set('metrics', metrics);\n        return msgs;\n    }\n}","outputs":2,"noerr":0,"initialize":"","finalize":"","x":360,"y":320,"wires":[[],[]]},{"id":"5b9e4c66.35e264","type":"link in","z":"440451c8.2b3d1","name":"Sparkplug Client In","links":["24164148.e566de"],"x":375,"y":300,"wires":[["df4384aa.933448"]]},{"id":"8f567662.cf2ec8","type":"link out","z":"440451c8.2b3d1","name":"Sparkplug Client Out","links":["b114ddd.1561a2"],"x":575,"y":300,"wires":[]},{"id":"b114ddd.1561a2","type":"link in","z":"440451c8.2b3d1","name":"Device In","links":["8f567662.cf2ec8"],"x":335,"y":140,"wires":[["ade5bcdc.5190a"]]},{"id":"24164148.e566de","type":"link out","z":"440451c8.2b3d1","name":"Device Out","links":["5b9e4c66.35e264"],"x":615,"y":100,"wires":[]},{"id":"2e79fbb0.64dd74","type":"function","z":"440451c8.2b3d1","name":"","func":"msg.payload = {\n    \"timestamp\":Date.now(),\n    \"metrics\":[\n        {\n            \"name\":\"my_int\",\n            \"value\": 456,\n            \"type\":\"int32\"\n            \n        },\n        {\n            \"name\":\"my_float\",\n            \"value\": 456,\n            \"type\":\"float\"\n            \n        }\n    ]\n}\nmsg.topic='ddata';\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":300,"y":60,"wires":[["ade5bcdc.5190a"]]},{"id":"6c175652.213638","type":"inject","z":"440451c8.2b3d1","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":60,"wires":[["2e79fbb0.64dd74"]]},{"id":"8571497d.b55188","type":"debug","z":"440451c8.2b3d1","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":670,"y":160,"wires":[]},{"id":"1ad2df75.26cf01","type":"comment","z":"440451c8.2b3d1","name":"Replace these two nodes with your device connection","info":"","x":200,"y":20,"wires":[]},{"id":"82963673.0a0298","type":"comment","z":"440451c8.2b3d1","name":"Replace this node with your device connection","info":"","x":770,"y":200,"wires":[]},{"id":"ade5bcdc.5190a","type":"subflow:88753461.2b34c8","z":"440451c8.2b3d1","name":"","env":[],"x":480,"y":120,"wires":[["24164148.e566de"],["8571497d.b55188"]]},{"id":"df4384aa.933448","type":"sparkplug","z":"440451c8.2b3d1","name":"","broker":"tcp://localhost","port":"1883","clientid":"NodeREDSimpleEdgeNode","groupid":"Sparkplug Devices","edgenode":"Node-RED Edge Node","version":"spBv1.0","enablecache":"false","publishdeath":"true","user":"admin","password":"changeme","x":480,"y":300,"wires":[["8f567662.cf2ec8"]]},{"id":"50960c76.2b4824","type":"comment","z":"440451c8.2b3d1","name":"You can make as many copies of this device flow as you need","info":"","x":340,"y":180,"wires":[]},{"id":"ef96a8dc.185de8","type":"comment","z":"440451c8.2b3d1","name":"You only need one Sparkplug node for multiple devices","info":"","x":460,"y":340,"wires":[]}]